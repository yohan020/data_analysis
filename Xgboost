{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3228623,"sourceType":"datasetVersion","datasetId":1957837}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:34:19.388506Z","iopub.execute_input":"2025-10-20T05:34:19.389388Z","iopub.status.idle":"2025-10-20T05:34:19.394589Z","shell.execute_reply.started":"2025-10-20T05:34:19.389356Z","shell.execute_reply":"2025-10-20T05:34:19.393452Z"}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"df_train = pd.read_csv(\"/kaggle/input/flight-price-prediction/Clean_Dataset.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:34:19.396432Z","iopub.execute_input":"2025-10-20T05:34:19.396835Z","iopub.status.idle":"2025-10-20T05:34:19.817564Z","shell.execute_reply.started":"2025-10-20T05:34:19.396804Z","shell.execute_reply":"2025-10-20T05:34:19.816455Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"df_train.drop(\"Unnamed: 0\", axis=1, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:34:19.818476Z","iopub.execute_input":"2025-10-20T05:34:19.818744Z","iopub.status.idle":"2025-10-20T05:34:19.845860Z","shell.execute_reply.started":"2025-10-20T05:34:19.818722Z","shell.execute_reply":"2025-10-20T05:34:19.844677Z"}},"outputs":[],"execution_count":65},{"cell_type":"code","source":"df_train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:34:19.847460Z","iopub.execute_input":"2025-10-20T05:34:19.847844Z","iopub.status.idle":"2025-10-20T05:34:19.995731Z","shell.execute_reply.started":"2025-10-20T05:34:19.847756Z","shell.execute_reply":"2025-10-20T05:34:19.994605Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 300153 entries, 0 to 300152\nData columns (total 11 columns):\n #   Column            Non-Null Count   Dtype  \n---  ------            --------------   -----  \n 0   airline           300153 non-null  object \n 1   flight            300153 non-null  object \n 2   source_city       300153 non-null  object \n 3   departure_time    300153 non-null  object \n 4   stops             300153 non-null  object \n 5   arrival_time      300153 non-null  object \n 6   destination_city  300153 non-null  object \n 7   class             300153 non-null  object \n 8   duration          300153 non-null  float64\n 9   days_left         300153 non-null  int64  \n 10  price             300153 non-null  int64  \ndtypes: float64(1), int64(2), object(8)\nmemory usage: 25.2+ MB\n","output_type":"stream"}],"execution_count":66},{"cell_type":"code","source":"df_train.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:34:19.998678Z","iopub.execute_input":"2025-10-20T05:34:19.998991Z","iopub.status.idle":"2025-10-20T05:34:20.043395Z","shell.execute_reply.started":"2025-10-20T05:34:19.998965Z","shell.execute_reply":"2025-10-20T05:34:20.042369Z"}},"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"            duration      days_left          price\ncount  300153.000000  300153.000000  300153.000000\nmean       12.221021      26.004751   20889.660523\nstd         7.191997      13.561004   22697.767366\nmin         0.830000       1.000000    1105.000000\n25%         6.830000      15.000000    4783.000000\n50%        11.250000      26.000000    7425.000000\n75%        16.170000      38.000000   42521.000000\nmax        49.830000      49.000000  123071.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>duration</th>\n      <th>days_left</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>300153.000000</td>\n      <td>300153.000000</td>\n      <td>300153.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>12.221021</td>\n      <td>26.004751</td>\n      <td>20889.660523</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.191997</td>\n      <td>13.561004</td>\n      <td>22697.767366</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.830000</td>\n      <td>1.000000</td>\n      <td>1105.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>6.830000</td>\n      <td>15.000000</td>\n      <td>4783.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>11.250000</td>\n      <td>26.000000</td>\n      <td>7425.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>16.170000</td>\n      <td>38.000000</td>\n      <td>42521.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>49.830000</td>\n      <td>49.000000</td>\n      <td>123071.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":67},{"cell_type":"code","source":"df_train.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:34:20.044140Z","iopub.execute_input":"2025-10-20T05:34:20.044454Z","iopub.status.idle":"2025-10-20T05:34:20.181809Z","shell.execute_reply.started":"2025-10-20T05:34:20.044425Z","shell.execute_reply":"2025-10-20T05:34:20.179671Z"}},"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"airline             0\nflight              0\nsource_city         0\ndeparture_time      0\nstops               0\narrival_time        0\ndestination_city    0\nclass               0\nduration            0\ndays_left           0\nprice               0\ndtype: int64"},"metadata":{}}],"execution_count":68},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX = df_train.drop(\"price\", axis = 1)\ny = df_train[\"price\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nX_train_categorical = X_train.select_dtypes(include=['object']).columns.tolist()\nX_train_numerical = X_train.select_dtypes(include=['int64','float64']).columns.tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:34:20.183468Z","iopub.execute_input":"2025-10-20T05:34:20.183790Z","iopub.status.idle":"2025-10-20T05:34:20.320172Z","shell.execute_reply.started":"2025-10-20T05:34:20.183767Z","shell.execute_reply":"2025-10-20T05:34:20.318506Z"}},"outputs":[],"execution_count":69},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nCategorical_Transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\nNumerical_Transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())\n])\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cat', Categorical_Transformer, X_train_categorical),\n        ('num', Numerical_Transformer, X_train_numerical)\n    ]\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:34:20.321796Z","iopub.execute_input":"2025-10-20T05:34:20.322254Z","iopub.status.idle":"2025-10-20T05:34:20.329343Z","shell.execute_reply.started":"2025-10-20T05:34:20.322217Z","shell.execute_reply":"2025-10-20T05:34:20.328115Z"}},"outputs":[],"execution_count":70},{"cell_type":"code","source":"import xgboost as xgb\n\nmodel = xgb.XGBRegressor(\n    n_estimators=1000,\n    learning_rate=0.3, \n    max_depth=8,\n    reg_alpha=0.1,\n    random_state=42\n)\n\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                             ('model', model)\n                             ])\nmy_pipeline.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:34:20.330511Z","iopub.execute_input":"2025-10-20T05:34:20.332024Z","iopub.status.idle":"2025-10-20T05:34:40.177089Z","shell.execute_reply.started":"2025-10-20T05:34:20.331982Z","shell.execute_reply":"2025-10-20T05:34:40.175693Z"}},"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('cat',\n                                                  Pipeline(steps=[('onehot',\n                                                                   OneHotEncoder(handle_unknown='ignore'))]),\n                                                  ['airline', 'flight',\n                                                   'source_city',\n                                                   'departure_time', 'stops',\n                                                   'arrival_time',\n                                                   'destination_city',\n                                                   'class']),\n                                                 ('num',\n                                                  Pipeline(steps=[('scaler',\n                                                                   StandardScaler())]),\n                                                  ['duration', 'days_left'])])),\n                ('model',\n                 XGBRegressor(base...\n                              feature_types=None, gamma=None, grow_policy=None,\n                              importance_type=None,\n                              interaction_constraints=None, learning_rate=0.3,\n                              max_bin=None, max_cat_threshold=None,\n                              max_cat_to_onehot=None, max_delta_step=None,\n                              max_depth=8, max_leaves=None,\n                              min_child_weight=None, missing=nan,\n                              monotone_constraints=None, multi_strategy=None,\n                              n_estimators=1000, n_jobs=None,\n                              num_parallel_tree=None, random_state=42, ...))])","text/html":"<style>#sk-container-id-13 {color: black;background-color: white;}#sk-container-id-13 pre{padding: 0;}#sk-container-id-13 div.sk-toggleable {background-color: white;}#sk-container-id-13 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-13 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-13 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-13 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-13 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-13 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-13 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-13 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-13 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-13 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-13 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-13 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-13 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-13 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-13 div.sk-item {position: relative;z-index: 1;}#sk-container-id-13 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-13 div.sk-item::before, #sk-container-id-13 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-13 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-13 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-13 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-13 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-13 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-13 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-13 div.sk-label-container {text-align: center;}#sk-container-id-13 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-13 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-13\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                                  Pipeline(steps=[(&#x27;onehot&#x27;,\n                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                                  [&#x27;airline&#x27;, &#x27;flight&#x27;,\n                                                   &#x27;source_city&#x27;,\n                                                   &#x27;departure_time&#x27;, &#x27;stops&#x27;,\n                                                   &#x27;arrival_time&#x27;,\n                                                   &#x27;destination_city&#x27;,\n                                                   &#x27;class&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;duration&#x27;, &#x27;days_left&#x27;])])),\n                (&#x27;model&#x27;,\n                 XGBRegressor(base...\n                              feature_types=None, gamma=None, grow_policy=None,\n                              importance_type=None,\n                              interaction_constraints=None, learning_rate=0.3,\n                              max_bin=None, max_cat_threshold=None,\n                              max_cat_to_onehot=None, max_delta_step=None,\n                              max_depth=8, max_leaves=None,\n                              min_child_weight=None, missing=nan,\n                              monotone_constraints=None, multi_strategy=None,\n                              n_estimators=1000, n_jobs=None,\n                              num_parallel_tree=None, random_state=42, ...))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-83\" type=\"checkbox\" ><label for=\"sk-estimator-id-83\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                                  Pipeline(steps=[(&#x27;onehot&#x27;,\n                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                                  [&#x27;airline&#x27;, &#x27;flight&#x27;,\n                                                   &#x27;source_city&#x27;,\n                                                   &#x27;departure_time&#x27;, &#x27;stops&#x27;,\n                                                   &#x27;arrival_time&#x27;,\n                                                   &#x27;destination_city&#x27;,\n                                                   &#x27;class&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;duration&#x27;, &#x27;days_left&#x27;])])),\n                (&#x27;model&#x27;,\n                 XGBRegressor(base...\n                              feature_types=None, gamma=None, grow_policy=None,\n                              importance_type=None,\n                              interaction_constraints=None, learning_rate=0.3,\n                              max_bin=None, max_cat_threshold=None,\n                              max_cat_to_onehot=None, max_delta_step=None,\n                              max_depth=8, max_leaves=None,\n                              min_child_weight=None, missing=nan,\n                              monotone_constraints=None, multi_strategy=None,\n                              n_estimators=1000, n_jobs=None,\n                              num_parallel_tree=None, random_state=42, ...))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-84\" type=\"checkbox\" ><label for=\"sk-estimator-id-84\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                 Pipeline(steps=[(&#x27;onehot&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                 [&#x27;airline&#x27;, &#x27;flight&#x27;, &#x27;source_city&#x27;,\n                                  &#x27;departure_time&#x27;, &#x27;stops&#x27;, &#x27;arrival_time&#x27;,\n                                  &#x27;destination_city&#x27;, &#x27;class&#x27;]),\n                                (&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;duration&#x27;, &#x27;days_left&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-85\" type=\"checkbox\" ><label for=\"sk-estimator-id-85\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;airline&#x27;, &#x27;flight&#x27;, &#x27;source_city&#x27;, &#x27;departure_time&#x27;, &#x27;stops&#x27;, &#x27;arrival_time&#x27;, &#x27;destination_city&#x27;, &#x27;class&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-86\" type=\"checkbox\" ><label for=\"sk-estimator-id-86\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-87\" type=\"checkbox\" ><label for=\"sk-estimator-id-87\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;duration&#x27;, &#x27;days_left&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-88\" type=\"checkbox\" ><label for=\"sk-estimator-id-88\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-89\" type=\"checkbox\" ><label for=\"sk-estimator-id-89\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.3, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=8, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=1000, n_jobs=None,\n             num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":71},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error, r2_score\n\npreds = my_pipeline.predict(X_test)\n\nrmse = np.sqrt(mean_squared_error(y_test, preds))\nprint(f'R^2: {r2_score(y_test, preds)}')\nprint(f'RMSE: {rmse}')\nprint(f'상대오차: {rmse/y_test.mean()}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T05:36:44.168676Z","iopub.execute_input":"2025-10-20T05:36:44.168980Z","iopub.status.idle":"2025-10-20T05:36:47.665084Z","shell.execute_reply.started":"2025-10-20T05:36:44.168960Z","shell.execute_reply":"2025-10-20T05:36:47.664294Z"}},"outputs":[{"name":"stdout","text":"R^2: 0.9912479554549762\nRMSE: 2124.0347973714856\n상대오차: 0.10165758040454094\n","output_type":"stream"}],"execution_count":73},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}